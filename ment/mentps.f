c
c     Graphic Plot routines for MENT2A (Postscript output)
c     Compiled and improved by Urs Rohrer (SIN/PSI) 1981-1995
c
      SUBROUTINE SPLOTPS(LAN,L)
C
      COMMON / TROL / NAME,KTYPE,KADJ,MITER,PREC,QTOL,
     1                STEPAT,RELABN,RELRAN,STRATN
      CHARACTER*80    NAME
      COMMON          SPL(51),CONT(51),PFIT(51,20)
      COMMON / EXPD / KM,LM,PROJ(51,20),DRL(20),DS,REDS,SFID(20),LNOR
      COMMON / TRAN / IM,JM,XGRID(51),YGRID(51),SOURCE(51,51)
      COMMON / STOR / XCEN,YCEN,SCEN(20),ROMA(2,2,20),RINV(2,2,20),
     1                HFAC(51,20),SREF(20),SLIM,TLIM
      COMMON / PS /   PHSP(50),PERC(50),NOC,EMIT
      COMMON /CONTI/  HFACO(51,20), CONTF
      LOGICAL CONTF,  FIRST, FIRST2
      COMMON / TEKT / MINX,MAXX,MINY,MAXY,LCHX,LCHY,SCALX,SCALY
      REAL            MINX,MAXX,MINY,MAXY,LCHX,LCHY,SCALX,SCALY
      COMMON /COLTAG/ COLOR, XSCAL, YSCAL, XOFF, YOFF, CHSIZE, NDEV
      LOGICAL         COLOR
      REAL            WORK(51),SPL2(102),AUX(102)
      CHARACTER*11    LTIT,MTIT,STIT,INPUT,TIT1,TIT2
      CHARACTER*30    EMITEX,TEMP
      CHARACTER*40    TEXT1
      DATA            MINX,MAXX,MINY,MAXY,LCHX,LCHY,SCALX,SCALY
     1                / 0., 32.,  .5, 24., .32,  .6,  32.,  32./
      DATA            NDIMX / 51 /
      DATA            NDIMY / 51 /
      DATA            FIRST, FIRST2 /.TRUE.,.TRUE./
      DATA            NCDEF /-110/
      DATA            LTIT /'L = 1      '/
      DATA            MTIT /'L = 1   MOD'/
      DATA            EMITEX /'Emit(86%)=110.00 Pi mmmrad    '/
C
      DO 11 I = 80, 1, -1
       IF (NAME(I:I) .NE. ' ') GO TO 12
   11 CONTINUE
   12 MX = I
C
      DO 701 K=1,KM
       SPL(K)=DS*FLOAT(K-1)
       SPL2(K)=SPL(K)
       SPL2(KM+K)=SPL(K)
  701 CONTINUE
C
      IF (FIRST2) THEN
       FIRST2=.FALSE.
      ELSE
       CALL PSNEWPAGE
      ENDIF
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
      CALL FRAMEPS(0)
      CALL PSTXTS(CHSIZE) ! SMALL FONTS
      IF (LAN .EQ. 100) GO TO 1705  ! PHSPC
      GOTO (703,704,705,706,707,708,709,710), LAN
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
  703 WRITE(LTIT(4:5),973) L
      DO 1703 K=1,KM
       AUX(K)=PROJ(K,L)
       AUX(KM+K)=PFIT(K,L)
 1703 CONTINUE
      CALL PSSETCOL(3)	!	GRUEN
      CALL TPLOTPS(SPL2,AUX,2*KM,1,-1.,-1.,'S (cm)',6,'Proj',4,
     1 LTIT(1:5),5,1,1,-1,0,1,1,1.,0,0,0,0,0,0)
      CALL PSSETCOL(4)	!	HELL-BLAU
      CALL TPLOTPS(SPL,PROJ(1,L),KM,0,-1.,-1.,'S (cm)',6,'Proj',4,
     1 LTIT(1:5),5,1,1,-1,8,1,1,1.,0,0,0,0,0,0)
      CALL PSSETCOL(1)	!	SCHWARZ
      CALL TPLOTPS(SPL,PFIT(1,L),KM,0,-1.,-1.,'S (cm)',6,'Proj',4,
     1 LTIT(1:5),5,1,1,0,0,1,1,1.,0,0,0,0,0,0)
      GO TO 801
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
  704 WRITE(LTIT(4:5),973) L
      STIT = LTIT
      INDS = 5
      CALL PSSETCOL(1)	!	SCHWARZ
      CALL TPLOTPS(SPL,HFAC(1,L),KM,1,-1.,-1.,'S (cm)',6,'HFAC  ',6,
     1 STIT(1:INDS),INDS,1,1,-1,4,1,1,1.,0,0,0,0,0,0)
      GO TO 801
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
  705 NCONT = L
      WX=XGRID(IM)-XGRID(1)
      WY=YGRID(JM)-YGRID(1)
      CALL MODXSCAL(XGRID,IM,JM,SOURCE)
      NPX=-IM
      NPY=-JM
      CALL PSSETCOL(3)	!	GRUEN
      CALL TCONTRPS(XGRID,NPX,YGRID,NPY,SOURCE,NDIMX,NDIMY,NCONT,
     1 0.,1.,.1,CONT,WX,WY,'S (cm)',6,'T (r) ',5,NAME(1:MX),
     2 MX,1.,0,0,0,0,0,0)
      CALL RESXSCAL(XGRID,IM,JM,SOURCE)
      GO TO 801
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
 1705 CONTINUE
      CALL PSSETCOL(2)	!	ROT
      CALL TPLOTPS(PHSP,PERC,NOC-1,1,-1.,-1.,'* Pi (mmmrad)',14,
     1 '100-%',5,NAME(1:MX),MX,1,2,0,2,1,1,1.,0,0,0,0,0,0)
      GO TO 801
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
  706 CALL MODXSCAL2(XGRID,IM,JM,SOURCE)
      CALL PSSETCOL(4)	!	HELL-BLAU
      CALL TISO3DPS(SOURCE,NDIMX,IM,JM,1,CONT,NAME(1:MX),MX,0,0)
      CALL RESXSCAL2(XGRID,IM,JM,SOURCE)
      GO TO 801
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
  707 CALL MODXSCAL2(XGRID,IM,JM,SOURCE)
      CALL PSSETCOL(4)	!	HELL-BLAU
      CALL TISO3DPS(SOURCE,NDIMX,IM,JM,0,CONT,NAME(1:MX),MX,0,0)
      CALL RESXSCAL2(XGRID,IM,JM,SOURCE)
      GO TO 801
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
  708 DO 510 J=1,51
      WORK(J)=0.
      DO 500 I=1,51
  500 WORK(J)=WORK(J)+SOURCE(J,I)
  510 WORK(J)=WORK(J)*(YGRID(2)-YGRID(1))
      CALL PSSETCOL(1)	!	SCHWARZ
      CALL TPLOTPS(XGRID,WORK,KM,1,-1.,-1.,'X (cm)',6,'Proj',4,
     1 NAME(1:MX),MX,1,1,0,0,1,1,1.,0,0,0,0,0,0)
      GO TO 801
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
  709 YMAX = 0.
       DO 530 J=1,51
        WORK(J)=0.
        DO 520 I=1,51
  520  WORK(J)=WORK(J)+SOURCE(I,J)
  530  YMAX=MAX(YMAX,WORK(J))
       DO 540 J=1,51
  540  WORK(J)=WORK(J)/YMAX
      CALL PSSETCOL(1)	!	SCHWARZ
      CALL TPLOTPS(YGRID,WORK,KM,1,-1.,-1.,'T (r)',5,
     1 'Proj',4,NAME(1:MX),MX,1,1,0,0,1,1,1.,0,0,0,0,0,0)
      GO TO 801
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
  710 CALL PSTEXT(3.*SCALX,23.*SCALY,NAME(1:MX))
      DO 2713 L=1,MIN(6,LM)
       CALL FRAMEPS(L)
       IF (L.LE.3) THEN
        TIT2 = 'P'
       ELSE
	TIT2 = ' '
       ENDIF
       IF (L.EQ.3 .OR. L.EQ.MIN(6,LM)) THEN
        TIT1 = 'S (cm)'
       ELSE
        TIT1 = '      '
       ENDIF
       WRITE(LTIT(4:5),973) L
       DO 2703 K=1,KM
        AUX(K)=PROJ(K,L)
        AUX(KM+K)=PFIT(K,L)
 2703  CONTINUE
       CALL PSSETCOL(3)	!	GRUEN
       CALL TPLOTPS(SPL2,AUX,2*KM,1,-1.,-1.,TIT1,6,TIT2,1,
     1 LTIT(1:5),5,1,1,-1,0,1,1,1.,0,0,0,0,0,1)
       CALL PSSETCOL(4)	!	HELL-BLAU
       CALL TPLOTPS(SPL,PROJ(1,L),KM,0,-1.,-1.,TIT1,6,TIT2,1,
     1 LTIT(1:5),5,1,1,-1,8,1,1,1.,0,0,0,0,0,1)
       CALL PSSETCOL(1)	!	SCHWARZ
       CALL TPLOTPS(SPL,PFIT(1,L),KM,0,-1.,-1.,TIT1,6,TIT2,1,
     1 LTIT(1:5),5,1,1,0,0,1,1,1.,0,0,0,0,0,1)
 2713 CONTINUE
      NCONT=NCDEF
      WX=XGRID(IM)-XGRID(1)
      WY=YGRID(JM)-YGRID(1)
      CALL MODXSCAL(XGRID,IM,JM,SOURCE)
      NPX=-IM
      NPY=-JM
      CALL PSSETCOL(3)	!	GRUEN	
      CALL FRAMEPS(7)
      CALL TCONTRPS(XGRID,NPX,YGRID,NPY,SOURCE,NDIMX,NDIMY,NCONT,
     1 0.,1.,.1,CONT,WX,WY,'S (cm)',6,'T (r) ',6,NAME(1:MX),
     2 MX,1.,0,0,0,0,1,1)
      CALL RESXSCAL(XGRID,IM,JM,SOURCE)
      CALL FRAMEPS(8)
      CALL PSSETCOL(3)	!	GRUEN
      CALL TPLOTPS(PHSP,PERC,NOC-1,1,-1.,-1.,'* Pi (mmmrad)',14,
     1 '100-%',5,NAME(1:MX),MX,1,2,0,2,1,1,1.,0,0,0,0,1,1)
      CALL PSSETCOL(2)	!	ROT
      CALL TPLOTPS(PHSP,PERC,NOC-1,0,-1.,-1.,'* Pi (mmmrad)',14,
     1 '100-%',5,NAME(1:MX),MX,1,2,0,2,1,1,1.,0,0,0,0,1,1)
      CALL PSSETCOL(3)	!	GRUEN
      WRITE(EMITEX(11:16),1010) EMIT
      CALL PSTEXT(30.5*SCALX,9.5*SCALY,EMITEX(1:10))
      N = 9
      CALL MYTRIM(EMITEX(11:19),TEMP,N)
      CALL PSTEXT(30.5*SCALX,9.0*SCALY,TEMP(1:N))
      CALL PSTEXT(30.5*SCALX,8.5*SCALY,EMITEX(21:26))
      CALL FRAMEPS(9)
      CALL PSSETCOL(4)	!	HELL-BLAU
      CALL MODXSCAL2(XGRID,IM,JM,SOURCE)
      CALL TISO3DPS(SOURCE,NDIMX,IM,JM,0,CONT,NAME(1:MX),MX,1,1)
      CALL RESXSCAL2(XGRID,IM,JM,SOURCE)
      CALL PSSETCOL(1)	!	SCHWARZ
      CALL TIMDSPS(30.,.1)
      GO TO 801
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
  801 CALL FRAMEOLD
      RETURN
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
  973 FORMAT(I2)
 1001 FORMAT(I1)
 1004 FORMAT(I1,1X,I1)
 1009 FORMAT(I4)
 1010 FORMAT(F6.2)
 1011 FORMAT(I2)
 1200 FORMAT(A)
      END

      SUBROUTINE TCONTRPS(X,NPX,Y,NPY,Z,IDX,IDY,NC,ZMN,ZMX,DLZ,ZPLAN,
     1 XAXIS,YAXIS,LABELX,NLX,LABELY,NLY,LABELZ,NLZ,SYSIZE,KXDEN,
     2 KYDEN,KXTICS,KYTICS,NOTIT,NOTDS)
C
      COMMON /CNTRCOM/ ISYM(50)
      COMMON / TEKT / MINX,MAXX,MINY,MAXY,LCHX,LCHY,SCALX,SCALY
      REAL            MINX,MAXX,MINY,MAXY,LCHX,LCHY,SCALX,SCALY
      COMMON / DEV /  ITYP,IOPT
      COMMON / CSYMB / NOSYM
      COMMON / PS /   PHSP(50),PERC(50),NOC,EMIT
      CHARACTER*(*)   LABELX, LABELY, LABELZ
c      CHARACTER*28    LEGEND
      CHARACTER*8     LEGEND1
      CHARACTER*7     LEGEND2
      REAL            XSCALE(2), YSCALE(2)
      REAL            X(2), Y(2), Z(IDX,1), ZPLAN(1)
      REAL            ZT(4), MAXXOLD
C
      MAXXOLD = MAXX
      MAXX    = MAXX - 20 * LCHX
C
      NOSYM   = 1
      IF (NC .LT. 0) NOSYM = 0
      NOC     = IABS(NC)
      IF (NOC .GT. 100) NOC = NOC - 100
      NOC     = MAX(NOC,3)
      NOC     = MIN(NOC,25)
C
      ZMIN    = ZMN
      ZMAX    = ZMX
      DELZ    = 0.0
      NOX     = IABS(NPX)
      NOY     = IABS(NPY)
      DO 10 I = 1, 50
   10 ISYM(I) = 0
C     ESTABLISH SCALES
      CALL MINV (X,1,NOX,I,XSCALE(1))
      CALL MAXV (X,1,NOX,I,XSCALE(2))
      CALL MINV (Y,1,NOY,I,YSCALE(1))
      CALL MAXV (Y,1,NOY,I,YSCALE(2))
      CALL TPLOTPS(XSCALE,YSCALE,2,1,-1.,-1.,LABELX,NLX,LABELY,NLY,
     1 LABELZ,NLZ,1,1,-1,0,1,1,1.,KXDEN,KYDEN,KXTICS,KYTICS,NOTIT,NOTDS)
      IF (NPX .LE. 0) CALL MINM (Z,IDX,NOX,NOY,I,J,ZMIN)
      IF (NPY .LE. 0) CALL MAXM (Z,IDX,NOX,NOY,I,J,ZMAX)
      IF (DELZ .GT. 0) GO TO 20
      DELZ = (0.99*ZMAX-ZMIN)/(NOC-1.)
   20 IF (IDY .GT. 0) GO TO 30
      ZMAX = ZMAX-AMOD(ZMAX,DELZ)
      ZMIN = ZMIN-AMOD(ZMIN,DELZ)
      NOC  = MIN(NOC,IFIX((ZMAX-ZMIN)/DELZ+1.01))
   30 ZPLAN(1) = ZMIN
      DO 40 I = 2, NOC
      ZPLAN(I) = ZPLAN(I-1) + DELZ
   40 CONTINUE
      IF (ABS(NC) .LT. 100) GOTO 55
      DO 50 I = 2, NOC
      VAR = FLOAT(I-1)/FLOAT(NOC-1)
      VAR = VAR * VAR
      ZPLAN(I) = ZMIN+(.99*ZMAX-ZMIN)*VAR*(.25+.75*VAR*VAR)
   50 CONTINUE
   55 CONTINUE
      DO 90 NY = 2, NOY
      IX = MOD(NY,2)
      DY = Y(NY)-Y(NY-1)
      DO 80 INX = 2, NOX
      NX = INX
      IF (IX .NE. 0) NX = NOX - INX + 2
      ZT(1) = Z(NX-1,NY-1)
      ZT(2) = Z(NX,NY-1)
      ZT(3) = Z(NX,NY)
      ZT(4) = Z(NX-1,NY)
      DX    = X(NX)-X(NX-1)
      IF (ABS(ZT(3)-ZT(1))-ABS(ZT(4)-ZT(2))) 70,60,60
   60 CALL TRICTPS(X(NX),Y(NY),-DX,-DY,NOC,ZPLAN,ZT(4),ZT(3),ZT(2))
      CALL TRICTPS(X(NX-1),Y(NY-1),DX,DY,NOC,ZPLAN,ZT(2),ZT(1),ZT(4))
      GO TO 80
   70 CALL TRICTPS(X(NX-1),Y(NY),DX,-DY,NOC,ZPLAN,ZT(3),ZT(4),ZT(1))
      CALL TRICTPS(X(NX),Y(NY-1),-DX,DY,NOC,ZPLAN,ZT(1),ZT(2),ZT(3))
   80 CONTINUE
   90 CONTINUE

      CALL PSSETCOL(1)	!	BLACK
      XS = MAXX + 4. * LCHX
      YS = MAXY - 4. * LCHY
      IF (NOTIT.EQ.0) CALL PSTEXT(
     *             (XS-3.*LCHX)*SCALX,YS*SCALY,'Cont    mmmrad      %')
      YS  = YS - LCHY
      CALL PHSPC(Z,IDX,NOX,NOY,ZPLAN,NOC,X(2)-X(1),Y(2)-Y(1),PHSP,PERC)
      DO 120 I = 1, NOC
       YS  = YS - LCHY
       LEI = 64 + I

       WRITE(LEGEND1(1:8),9102,ERR=110) PHSP(I)
 9102  FORMAT(F8.1)
       GO TO 111
  110  WRITE(LEGEND1(1:8),9103) PHSP(I)
 9103  FORMAT(1PE8.2)
  111  CONTINUE

       WRITE(LEGEND2(1:7),9112,ERR=112) PERC(I)
 9112  FORMAT(F7.1)
       GO TO 113
  112  WRITE(LEGEND2(1:7),9113) PERC(I)
 9113  FORMAT(0PF7.1)
  113  CONTINUE

       IF (NOTIT .EQ. 0) THEN
        CALL PSTEXT((XS-2.*LCHX)*SCALX,YS*SCALY,CHAR(LEI)//':')
        CALL PSTEXT(XS*SCALX,YS*SCALY,LEGEND1(1:8))
        CALL PSTEXT((XS+8.*LCHX)*SCALX,YS*SCALY,LEGEND2(1:7))
       ENDIF
  120 CONTINUE
      DO 200 J  = 2, NOC
       PHSP(J-1) = PHSP(J)/3.1416
       PERC(J-1) = 100.-PERC(J)
  200 CONTINUE
      EMIT = 0.0
      DO 210 J = 1, NOC-1
       IF (PERC(J) .GE. 14.0) GO TO 220
  210 CONTINUE
      GO TO 230
  220 DIF1 = ALOG(PERC(J)) - ALOG(PERC(J-1))
      DIF2 = ALOG(14.0)    - ALOG(PERC(J-1))	!  86%-INTERSECTION
      IF (DIF1 .EQ. 0.0) GO TO 230
      Q    = DIF2 / DIF1
      DIF3 = PHSP(J-1) - PHSP(J)
      EMIT = PHSP(J-1) - Q * DIF3		! 4*SIGMA EMITTANCE
230   MAXX      = MAXXOLD
      CALL PSFLUSH
      RETURN
C
      END

      SUBROUTINE TISO3DPS(A,IA,NX,NY,LFLIP,COVER,LABEL,NL,NOTIT,NOTDS)
C
      COMMON / TEKT / MNU,MXU,MNV,MXV,LCHU,LCHV,SCALX,SCALY
      REAL            MNU,MXU,MNV,MXV,LCHU,LCHV,SCALX,SCALY
      REAL            LABH,LABW,LEGW
      DIMENSION       A(51,51),COVER(1)
      CHARACTER*(*)   LABEL
      LOGICAL         COVL,COVR
C
C     INLINE FUNCTION DEFINITION FOR SCALING DATA FROM ARRAY A
C
      VALUE(I,J) = RANGE*A(I+KFLIP*(NU+1-2*I),J+KFLIP*(NV+1-2*J))
C
      KFLIP  = LFLIP
      IF (KFLIP .NE. 0) KFLIP = 1
      RATIO  = 1./SQRT(3.)
C
C     DETERMINE MIN AND MAX VALUE OF ARRAY, FIX DELTAU,DELTAV
C
      CALL MAXM(A,IA,NX,NY,IHI,JHI,AHI)
      NU     = MAX(3,NX)
      NV     = MAX(3,NY)
      LABH   = 2.*LCHV
      LABW   = FLOAT(NL)*LCHU
      LEGW   = 2.*LCHU
      UWID   = MXU-MNU-2.*LEGW
      VWID   = MXV-MNV-2.*LABH
      SCALE  = MIN(UWID,VWID/(2.*RATIO))
      DELTAU = SCALE/(2.*NV)
      DELTAV = DELTAU*RATIO
      ROOF   = SCALE*RATIO
      RANGE  = ROOF/AHI
C
C     U0 AND V0 ARE COORDINATES OF THE ARRAY ORIGIN
C
      U0 = (MXU + MNU) / 2.
      V0 = MNV
C
C     DISPLAY FIRST LINE, INITIALIZE COVER
C
      CALL PSMOV(SCALX*U0,SCALY*V0)
      DO 101 IU  = 1, NU
       U = U0+DELTAU*(IU-1)
       V = V0+DELTAV*(IU-1)
       Z = V+VALUE(IU,1)
       CALL PSDRW(SCALX*U,SCALY*Z)
       COVER(IU) = Z
  101 CONTINUE
      CALL PSDRW(SCALX*U,SCALY*V)
C
C     DISPLAY OTHER LINES, UPDATE COVER
C
      DO 401 IV = 2, NV
       U    = U0-DELTAU*FLOAT(IV-1)
       V    = V0+DELTAV*FLOAT(IV-1)
       CALL PSMOV(SCALX*U,SCALY*V)
       COLD = V+VALUE(1,IV)
       CALL PSDRW(SCALX*U,SCALY*COLD)
       U    = U+DELTAU
       V    = V+DELTAV
       BR   = V+VALUE(2,IV)
       CALL PSDRW(SCALX*U,SCALY*BR)
       FR   = COVER(1)
       COVR = FR .GT. BR
       DO 301 IU = 3, NU
        U    = U0+DELTAU*(IU-IV)
        V    = V0+DELTAV*(IU+IV-2)
        FL   = FR
        FR   = COVER(IU-1)
        BL   = BR
        BR   = V+VALUE(IU,IV)
        COVL = COVR
        COVR = FR .GT. BR
C
C       DISPLAY APPROPRIATE SEGMENT FOR 4 POSSIBILITIES
C
        IF ((COVL .AND. .NOT.COVR) .OR. (COVR. AND. .NOT.COVL)) THEN
         SB  = BR-BL
         SF  = FR-FL
         DCO = (BL-FL)/(SF-SB)
         DCU = DCO*DELTAU
         DCV = DCO*SB
	ENDIF
	IF (COVL .AND. COVR) THEN
	 CONTINUE
        ELSE IF (COVL) THEN
         CALL PSMOV(SCALX*(U-DELTAU+DCU),SCALY*(BL+DCV))
         CALL PSDRW(SCALX*U,SCALY*BR)
        ELSE IF (COVR) THEN
         CALL PSDRW(SCALX*(U-DELTAU+DCU),SCALY*(BL+DCV))
	ELSE
         CALL PSDRW(SCALX*U,SCALY*BR)
	ENDIF
        COVER(IU-2) = COLD
        COLD = MAX(BL,FL)
  301  CONTINUE
       IF (.NOT.COVR) CALL PSDRW(SCALX*U,SCALY*AMAX1(V,FR))
       COVER(NU-1) = COLD
  401 CONTINUE
C
C     DRAW WALLS OF BOX
C
      CALL PSSETCOL(3)	!	GRUEN
      UU = DELTAU*NU-DELTAU
      UV = DELTAU*FLOAT(NV-1)
      VU = DELTAV*NU-DELTAV
      VV = DELTAV*FLOAT(NV-1)
      IF (NOTIT .EQ. 0) THEN
       CALL PSMOV(SCALX*U0,SCALY*V0)
       CALL PSDRW(SCALX*(U0+UU),SCALY*(V0+VU))
       CALL PSDRW(SCALX*(U0+UU),SCALY*(V0+VU+ROOF))
       IF (KFLIP .NE. 1) THEN
        CALL PSDRW(SCALX*U0,SCALY*(V0+ROOF))
        CALL PSDRW(SCALX*U0,SCALY*V0)
        CALL PSMOV(SCALX*U0,SCALY*(V0+ROOF))
       ELSE
        CALL PSDRW(SCALX*(U0+UU-UV),SCALY*(V0+VU+VV+ROOF))
        CUTL = MAX(BR,FR)
        CALL PSDRW(SCALX*(U0+UU-UV),SCALY*CUTL)
        CALL PSMOV(SCALX*(U0+UU-UV),SCALY*(V0+VU+VV+ROOF))
       ENDIF
       CALL PSDRW(SCALX*(U0-UV),SCALY*(V0+VV+ROOF))
       CALL PSDRW(SCALX*(U0-UV),SCALY*(V0+VV))
       CALL PSDRW(SCALX*U0,SCALY*V0)
      ENDIF
C
C     WRITE LABEL
C
      UXL = MAX(0.,U0-FLOAT(NL/2)*LCHU)
      IF (NOTIT .EQ. 0) CALL PSTEXT(UXL*SCALX,(MXV-LABH)*SCALY,LABEL)
C
C     WRITE LEGEND
C
      CALL PSTEXT((U0+UV/2.+LEGW)*SCALX,(V0+VV/2.-LABH)*SCALY,'S')
      CALL PSTEXT((U0-UV/2.-LEGW)*SCALX,(V0+VV/2.-LABH)*SCALY,'T')
      IF (NOTDS .EQ. 0) CALL TIMDSPS(MXU-15.*LCHU,MNV)
C
      CALL PSFLUSH
      RETURN
      END

      SUBROUTINE TPLOTPS(X,Y,NPOINTS,IFGRID,XAXIS,YAXIS,LABELX,NLX,
     1 LABELY,NLY,LABELZ,NLZ,KXTYPE,KYTYPE,KLINE,KSYMBL,KSTEPS,KSTEPL,
     2 SYSIZE,KXDEN,KYDEN,KXTICS,KYTICS,NOTIT,NOTDS)
C
      CHARACTER*(*)   LABELX, LABELY, LABELZ
      COMMON / TEKT / MINX,MAXX,MINY,MAXY,LCHX,LCHY,SCALX,SCALY
      REAL            MINX,MAXX,MINY,MAXY,LCHX,LCHY,SCALX,SCALY
      REAL            X(1),Y(1)
C
      IF (IFGRID .NE. 1) GO TO 8103
      CALL BINITT
      XUSE = MAXX-MINX-FLOAT(10+NLY)*LCHX
      YUSE = MAXY-MINY-6.*LCHY
      IF (XAXIS.GT.0. .AND. YAXIS.GT.0.) THEN
       IF (XAXIS*YUSE .GT. YAXIS*XUSE) THEN
        YUSE = XUSE*YAXIS/XAXIS
       ELSE
        XUSE = YUSE*XAXIS/YAXIS
       ENDIF
      ENDIF
      XSMIN = MINX+FLOAT(8+NLY)*LCHX
      XSMAX = XSMIN+XUSE
      YSMIN = MINY+3.*LCHY
      YSMAX = YSMIN+YUSE
      CALL SLIMX(XSMIN,XSMAX)
      CALL SLIMY(YSMIN,YSMAX)
      CALL NPTS(NPOINTS)
      IF (KXTYPE .NE. 1) CALL XTYPE(KXTYPE)
      IF (KYTYPE .NE. 1) CALL YTYPE(KYTYPE)
      IF (KXDEN.NE.0 .AND. KXDEN.NE.8) CALL XDEN(KXDEN)
      IF (KYDEN.NE.0 .AND. KYDEN.NE.8) CALL YDEN(KYDEN)
      IF (KXTICS .NE.0) CALL XTICS(KXTICS)
      IF (KYTICS .NE.0) CALL YTICS(KYTICS)
      CALL CHECK(X,Y)
      CALL LINE(KLINE)
      CALL SYMBL(KSYMBL)
      IF (KSTEPS.NE.0 .AND.  KSTEPS.NE.1)  CALL STEPS(KSTEPS)
      IF (KSTEPL.NE.0 .AND.  KSTEPL.NE.1)  CALL STEPL(KSTEPL)
      IF (SYSIZE.NE.0. .AND. SYSIZE.NE.1.) CALL SIZES(SYSIZE)
      CALL DSPLAYPS(X,Y)
      XPOS1 = MAX(0.,.5*(XSMIN+XSMAX)-FLOAT(NLX/2)*LCHX)
      XPOS2 = MAX(0.,.5*(XSMIN+XSMAX)-FLOAT(NLZ/2)*LCHX)
      YPOS  = .5 * (YSMIN + YSMAX)
      CALL PSTEXT(XPOS1*SCALX,MINY*SCALY,LABELX)
      CALL PSTEXT(MINX*SCALX,YPOS*SCALY,LABELY)
      IF (NOTIT .EQ. 0) CALL PSTEXT(XPOS2*SCALX,
     *                  (YSMAX+LCHY)*SCALY,LABELZ)
      IF (NOTDS .EQ. 0) CALL TIMDSPS(XSMAX-10.*LCHX,YSMAX-2.*LCHY)
      IF (IFGRID .EQ. 1) GO TO 8104
 8103 CONTINUE
      CALL NPTS(NPOINTS)
      CALL LINE(KLINE)
      CALL SYMBL(KSYMBL)
      IF (KSTEPS.NE.0 .AND. KSTEPS.NE.1)   CALL STEPS(KSTEPS)
      IF (KSTEPL.NE.0 .AND. KSTEPL.NE.1)   CALL STEPL(KSTEPL)
      IF (SYSIZE.NE.0. .AND. SYSIZE.NE.1.) CALL SIZES(SYSIZE)
      CALL CPLOTPS(X,Y)
 8104 CONTINUE
      CALL PSFLUSH
      RETURN
      END

      SUBROUTINE TRICTPS(X,Y,DX,DY,NOC,ZPLAN,ZX,ZV,ZY)
C
      COMMON /CNTRCOM/ ISYM(50)
      COMMON / CSYMB / NOSYM
      REAL             XP(2,50), YP(2,50), ZT(4), ZPLAN(1)
      CHARACTER*10     LABELX, LABELY, LABELZ
C
      ZT(1) = ZX
      ZT(2) = ZV
      ZT(3) = ZY
      ZT(4) = ZX
      ZTMIN = MIN(ZT(1),ZT(2),ZT(3))
      ZTMAX = MAX(ZT(1),ZT(2),ZT(3))
      IMIN  = NOC + 1
      IMAX  = 0
      DO 10 K = 1, NOC
      J = NOC - K + 1
      IF (ZPLAN(J) .GE. ZTMIN) IMIN = J
      IF (ZPLAN(K) .LE. ZTMAX) IMAX = K
   10 CONTINUE
      INT = IMAX - IMIN
      IF (INT.LT.0 .OR. ZTMIN.EQ.ZTMAX) GO TO 130
      I2 = 1
      DO 110 K = 1, 3
      ZTMAX = MAX(ZT(K),ZT(K+1))
      ZPMIN = MIN(ZT(K),ZT(K+1))
      MIN1  = NOC + 1
      MAX1  = 0
      DO 20 J = 1, NOC
      INZ = NOC-J+1
      IF (ZPLAN(INZ).GT.ZPMIN .OR. 
     1   (ZPLAN(INZ).EQ.ZPMIN .AND. ZTMIN.EQ.ZPMIN)) MIN1 = INZ
      IF (ZPLAN(J) .LE. ZTMAX) MAX1 = J
   20 CONTINUE
      INZ = MAX1 - MIN1
      IF (INZ.LT.0 .OR. ZTMAX.EQ.ZPMIN) GO TO 110
      IF (INZ-INT) 40,30,40
   30 GO TO (50,40), I2
   40 I2 = 1
      GO TO 60
   50 I2 = 2
   60 DO 100 J = MIN1, MAX1
      GO TO (70,80,90), K
   70 XP(I2,J) = X+DX*(ZPLAN(J)-ZT(2))/(ZT(1)-ZT(2))
      YP(I2,J) = Y
      GO TO 100
   80 XP(I2,J) = X
      YP(I2,J) = Y+DY*(ZPLAN(J)-ZT(2))/(ZT(3)-ZT(2))
      GO TO 100
   90 XP(I2,J) = X+DX*(ZPLAN(J)-ZT(3))/(ZT(1)-ZT(3))
      YP(I2,J) = Y+DY*(ZPLAN(J)-ZT(1))/(ZT(3)-ZT(1))
  100 CONTINUE
  110 CONTINUE
      DO 120 J = IMIN, IMAX
      ICOL = 2 + 2 * (J-2*(J/2))	!	ROT/HELL-BLAU
      CALL PSSETCOL(ICOL)		!	SWITCH ONLY LINE COLOR
      ISYM(J) = ISYM(J) + 1
      KSYMBL = 64 + J
      IF (NOSYM .EQ. 0) KSYMBL = 0
      IF (MOD(ISYM(J),11) .NE. 1) KSYMBL = 0
      IF (XP(1,J).EQ.X1OLD .AND. XP(2,J).EQ.X2OLD .AND.
     X    YP(1,J).EQ.Y1OLD .AND. YP(2,J).EQ.Y2OLD) GO TO 115
      IF (XP(1,J).EQ.XP(2,J) .AND. YP(1,J).EQ.YP(2,J)) GO TO 115
      CALL TPLOTPS(XP(1,J),YP(1,J),2,0,10.,10.,LABELX,NLX,LABELY,NLY,
     1 LABELZ,NLZ,1,1,0,KSYMBL,3,1,SYSIZE,0,0,0,0,0,0)
  115 X1OLD = XP(1,J)
      Y1OLD = YP(1,J)
      X2OLD = XP(2,J)
      Y2OLD = YP(2,J)
  120 CONTINUE
  130 RETURN
      END


      SUBROUTINE FRAMEPS(N)
C
      COMMON / TEKT / MINX,MAXX,MINY,MAXY,LCHX,LCHY,SCALX,SCALY
      REAL            MINX,MAXX,MINY,MAXY,LCHX,LCHY,SCALX,SCALY
C
      REAL PARAM(6,10)
      DATA PARAM /0.0, 32.0,  0.5, 24.0, 0.320, 0.60,
     1            0.0,  9.0, 15.3, 22.8, 0.187, 0.35,
     2            0.0,  9.0,  7.7, 15.2, 0.187, 0.35, 
     3            0.0,  9.0,  0.1,  7.6, 0.187, 0.35, 
     4           10.0, 19.0, 15.3, 22.8, 0.187, 0.35, 
     5           10.0, 19.0,  7.7, 15.2, 0.187, 0.35, 
     6           10.0, 19.0,  0.1,  7.6, 0.187, 0.35, 
     7           19.5, 36.0, 12.0, 22.8, 0.187, 0.35, 
     8           19.7, 30.5,  6.0, 12.5, 0.187, 0.35, 
     9           20.5, 32.0,  0.1,  7.0, 0.187, 0.35/ 
C
      MINX  = PARAM(1,N+1)
      MAXX  = PARAM(2,N+1)
      MINY  = PARAM(3,N+1)
      MAXY  = PARAM(4,N+1)
      LCHX  = PARAM(5,N+1)
      LCHY  = PARAM(6,N+1)
      SCALX = 32. * 3.6
      SCALY = 32. * 3.6
C
      RETURN
      END

      SUBROUTINE FRAMEOLD
C
      COMMON / TEKT / MINX,MAXX,MINY,MAXY,LCHX,LCHY,SCALX,SCALY
      REAL            MINX,MAXX,MINY,MAXY,LCHX,LCHY,SCALX,SCALY
C
      REAL PARAM(8)
      DATA PARAM /0.0, 32.0,  0.5, 24.0, 0.320, 0.60, 32.0, 32.0/
C
      MINX  = PARAM(1)
      MAXX  = PARAM(2)
      MINY  = PARAM(3)
      MAXY  = PARAM(4)
      LCHX  = PARAM(5)
      LCHY  = PARAM(6)
      SCALX = PARAM(7)
      SCALY = PARAM(8)
C
      RETURN
      END
